/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package visigo;

import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.TreeMap;
import javax.swing.DefaultListModel;
import javax.swing.text.BadLocationException;
import javax.swing.text.SimpleAttributeSet;
import javax.swing.text.StyledDocument;

/**
 *
 * @author Carbon
 */
public class ReportStat extends javax.swing.JFrame {

    /** Creates new form ReportStat */
    public ReportStat() {
        initComponents();
        
        this.populateComboBoxSubject();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jLabel8 = new javax.swing.JLabel();
        jComboBox4 = new javax.swing.JComboBox<>();
        jLabel7 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList<>();
        jButton3 = new javax.swing.JButton();
        jPanel5 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTextPane1 = new javax.swing.JTextPane();
        jLabel2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(96, 149, 213));

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("STATISTIQUES DE VISITE");

        jLabel8.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel8.setText("Sujet :");

        jComboBox4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox4ActionPerformed(evt);
            }
        });

        jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel7.setText("Sous-sujet:");

        jScrollPane1.setViewportView(jList1);

        jButton3.setText("Afficher les statistiques");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(jComboBox4, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton3, javax.swing.GroupLayout.DEFAULT_SIZE, 242, Short.MAX_VALUE))
                .addGap(0, 16, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addComponent(jLabel8)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jComboBox4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel7)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 261, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButton3)
                .addGap(19, 19, 19))
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jScrollPane3.setViewportView(jTextPane1);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(130, Short.MAX_VALUE)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 651, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(97, 97, 97))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(83, Short.MAX_VALUE)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 289, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(80, 80, 80))
        );

        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(16, 16, 16))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGap(47, 47, 47)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 57, Short.MAX_VALUE)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel4, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel5, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jComboBox4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox4ActionPerformed
        this.refreshListSubSubject();
    }//GEN-LAST:event_jComboBox4ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        
        
        if (!jList1.isSelectionEmpty()) {
            String selectedSubject = ((ComboBoxItem) jComboBox4.getSelectedItem()).getKey();
            String selectedKey = ((ComboBoxItem) jList1.getSelectedValue()).getKey();
            
            if(selectedSubject.equals("SECTEUR")){
                this.displaySecteurStats(selectedKey);
            }
            else if(selectedSubject.equals("REGION")){
                this.displayRegionStats(selectedKey);
            }
            else if(selectedSubject.equals("VISITEUR")){
                this.displayVisiteurStats(selectedKey);
            }
        }
        
        
    }//GEN-LAST:event_jButton3ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ReportStat.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ReportStat.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ReportStat.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ReportStat.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ReportStat().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton3;
    private javax.swing.JComboBox<ComboBoxItem> jComboBox4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JList<ComboBoxItem> jList1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTextPane jTextPane1;
    // End of variables declaration//GEN-END:variables

    private void populateComboBoxSubject() {
        String userRole = ConnectionManager.getUserRole();
        
        jComboBox4.addItem(new ComboBoxItem("0", "SELECTIONNEZ"));
        if(userRole.equals("Responsable")){
            jComboBox4.addItem(new ComboBoxItem("SECTEUR", "SECTEUR"));
            jComboBox4.addItem(new ComboBoxItem("REGION", "REGION"));
        }
        if(userRole.equals("Délégué")){
            jComboBox4.addItem(new ComboBoxItem("REGION", "REGION"));
        }
        jComboBox4.addItem(new ComboBoxItem("VISITEUR", "VISITEUR"));
    }
    
    private void refreshListSubSubject() {
        String selectedSubject = ((ComboBoxItem) jComboBox4.getSelectedItem()).getKey();
        DefaultListModel<ComboBoxItem> l1 = new DefaultListModel<>();
        String userMatricule = ConnectionManager.getUserMatricule();
        String userRole = ConnectionManager.getUserRole();
        String userRegCode = ConnectionManager.getRegCode();
        String userSecCode = ConnectionManager.getSecCode();
        
        if (!selectedSubject.equals("0")) {
            
            if(selectedSubject.equals("SECTEUR")){
                String req1 =    "SELECT secteur.SEC_CODE, secteur.SEC_LIBELLE  "
                               + "FROM secteur ORDER BY secteur.SEC_LIBELLE;";
                Object[] tableSecteurs = ConnectionManager.requestRead(req1);
                
                boolean okToAdd;
                for (int i = 0; i < tableSecteurs.length; i++) {
                    okToAdd = true;
                    
                    TreeMap< String, Object> treeSecteur = (TreeMap< String, Object>) tableSecteurs[i];
                    String secCode = (String) treeSecteur.get("SEC_CODE");
                    String secLibelle = (String) treeSecteur.get("SEC_LIBELLE");
                    
                    if(!userSecCode.equals(secCode)){
                        okToAdd = false;
                    }
                    if(okToAdd){
                        l1.addElement(new ComboBoxItem(secCode, secLibelle));
                    }
                }  
            }
            if(selectedSubject.equals("REGION")){
                String req1 =    "SELECT region.REG_CODE, region.REG_NOM, secteur.SEC_LIBELLE, secteur.SEC_CODE  "
                               + "FROM region, secteur WHERE region.SEC_CODE = secteur.SEC_CODE ORDER BY region.REG_NOM;";
                Object[] tableRegions = ConnectionManager.requestRead(req1);
                
                boolean okToAdd;
                for (int i = 0; i < tableRegions.length; i++) {
                    okToAdd = true;
                    
                    TreeMap< String, Object> treeRegion = (TreeMap< String, Object>) tableRegions[i];
                    String regCode = (String) treeRegion.get("REG_CODE");
                    String regNom = (String) treeRegion.get("REG_NOM");
                    String secLibelle = (String) treeRegion.get("SEC_LIBELLE");                    
                    String secCode = (String) treeRegion.get("SEC_CODE");                    
                    
                    if(userRole.equals("Responsable") && !userSecCode.equals(secCode)){
                        okToAdd = false;
                    }
                    if(userRole.equals("Délégué") && !userRegCode.equals(regCode)){
                        okToAdd = false;
                    }
                    if(okToAdd){
                        l1.addElement(new ComboBoxItem(regCode, regNom+" ("+secLibelle+")"));
                    }
                }  
            }
            else if(selectedSubject.equals("VISITEUR")){
                String req2=   "SELECT trava.REG_CODE, trava.TRA_ROLE, `region`.REG_NOM, `region`.SEC_CODE, `secteur`.`SEC_LIBELLE`, `visiteur`.`VIS_MATRICULE`, `visiteur`.`VIS_NOM`, `visiteur`.`VIS_PRENOM` "
                            + "FROM ("
                            + "    SELECT tr.* "
                            + "    FROM `travailler` tr "
                            + "    JOIN ("
                            + "        SELECT VIS_MATRICULE, MAX(jjmmaa) AS maxDate "
                            + "        FROM `travailler` "
                            + "        GROUP BY VIS_MATRICULE    ) groupetr "
                            + "    ON tr.VIS_MATRICULE = groupetr.VIS_MATRICULE "
                            + "    AND tr.jjmmaa = groupetr.maxDate "
                            + ") AS trava, `region`, `secteur`, `visiteur` "
                            + "WHERE `region`.REG_CODE = trava.REG_CODE  "
                            + "AND `region`.SEC_CODE = `secteur`.SEC_CODE "
                            + "AND trava.VIS_MATRICULE = `visiteur`.VIS_MATRICULE;";
                
                Object[] tableVisiteurs = ConnectionManager.requestRead(req2);
                
                boolean okToAdd;
                for (int i = 0; i < tableVisiteurs.length; i++) {
                    okToAdd = true;
                    
                    TreeMap< String, Object> treeVisiteur = (TreeMap< String, Object>) tableVisiteurs[i];
                    String pra_id = (String) treeVisiteur.get("VIS_MATRICULE");
                    String pra_nom = (String) treeVisiteur.get("VIS_NOM");
                    String pra_prenom = (String) treeVisiteur.get("VIS_PRENOM");
                    String regNom = (String) treeVisiteur.get("REG_NOM");
                    String regCode = (String) treeVisiteur.get("REG_CODE");
                    String secCode = (String) treeVisiteur.get("SEC_CODE");
                    
                    if(userRole.equals("Responsable") && !userSecCode.equals(secCode)){
                        okToAdd = false;
                    }
                    if(userRole.equals("Délégué") && !userRegCode.equals(regCode)){
                        okToAdd = false;
                    }
                    if(userRole.equals("Visiteur") && !userMatricule.equals(pra_id)){
                        okToAdd = false;
                    }
                    if(okToAdd){
                        l1.addElement(new ComboBoxItem(pra_id, pra_nom + " " + pra_prenom +" ("+ regNom+")"));
                    }
                }
            }
            
        }
        jList1.setModel(l1);
    }
    
    private void displayVisiteurStats(String visMatricule){
    
        String req = "SELECT "
                        + "DATE_FORMAT(RAP_DATE, '%Y-%m') AS RAP_MONTH, "
                        + "count(RAP_DATE) AS NB_RAP "
                    + "FROM rapport_visite "
                    + "WHERE VIS_MATRICULE = '"+ visMatricule +"' "
                    + "GROUP BY RAP_MONTH;";
        
        Object[] tableVisiteurs = ConnectionManager.requestRead(req);

        String req2 = "SELECT "
                    + "	DATE_FORMAT(activite_compl.AC_DATE, '%Y-%m') AS AC_MONTH, "
                    + "	count(activite_compl.AC_DATE) AS NB_AC "
                    + "FROM activite_compl, realiser, visiteur "
                    + "WHERE activite_compl.AC_NUM = realiser.AC_NUM "
                    + "AND realiser.VIS_MATRICULE = visiteur.VIS_MATRICULE "
                    + "AND visiteur.VIS_MATRICULE = '"+ visMatricule +"' "
                    + "GROUP BY AC_MONTH;";
        
        Object[] tableActivites = ConnectionManager.requestRead(req2);
        
        this.display(tableVisiteurs, tableActivites);
    }
    
    private void displayRegionStats(String regCode){
    
        String req = "SELECT trava.REG_CODE, "
                    + "	DATE_FORMAT(RAP_DATE, '%Y-%m') AS RAP_MONTH, "
                    + "    count(RAP_DATE) AS NB_RAP "
                    + "FROM ( "
                    + "    SELECT tr.* "
                    + "    FROM `travailler` tr "
                    + "    JOIN ( "
                    + "        SELECT VIS_MATRICULE, MAX(jjmmaa) AS maxDate "
                    + "        FROM `travailler` "
                    + "        GROUP BY VIS_MATRICULE "
                    + "    ) groupetr "
                    + "    ON tr.VIS_MATRICULE = groupetr.VIS_MATRICULE "
                    + "    AND tr.jjmmaa = groupetr.maxDate "
                    + ") AS trava, `region`, `visiteur`, `rapport_visite` "
                    + "WHERE `region`.REG_CODE = trava.REG_CODE "
                    + "AND trava.VIS_MATRICULE = `visiteur`.VIS_MATRICULE "
                    + "AND `visiteur`.VIS_MATRICULE = `rapport_visite`.VIS_MATRICULE "
                    + "AND `region`.REG_CODE = '"+ regCode +"' "
                    + "group by RAP_MONTH;";
        
        Object[] tableMonthRegionNbRapports = ConnectionManager.requestRead(req);

        String req2 = "SELECT trava.REG_CODE, "
                    + "	DATE_FORMAT(`activite_compl`.AC_DATE, '%Y-%m') AS AC_MONTH, "
                    + "    count(AC_DATE) AS NB_AC "
                    + "FROM ( "
                    + "    SELECT tr.* "
                    + "    FROM `travailler` tr "
                    + "    JOIN ( "
                    + "        SELECT VIS_MATRICULE, MAX(jjmmaa) AS maxDate "
                    + "        FROM `travailler` "
                    + "        GROUP BY VIS_MATRICULE "
                    + "    ) groupetr "
                    + "    ON tr.VIS_MATRICULE = groupetr.VIS_MATRICULE "
                    + "    AND tr.jjmmaa = groupetr.maxDate "
                    + ") AS trava, `region`, `visiteur`, `realiser`, `activite_compl` "
                    + "WHERE `region`.REG_CODE = trava.REG_CODE "
                    + "AND trava.VIS_MATRICULE = `visiteur`.VIS_MATRICULE "
                    + "AND `visiteur`.VIS_MATRICULE = `realiser`.VIS_MATRICULE "
                    + "AND `realiser`.AC_NUM = `activite_compl`.AC_NUM "
                    + "AND `region`.REG_CODE = '"+ regCode +"' "
                    + "group by AC_MONTH;";
        
        Object[] tableMonthRegionNbActivites = ConnectionManager.requestRead(req2);
        
        this.display(tableMonthRegionNbRapports, tableMonthRegionNbActivites);
    }
    
    private void displaySecteurStats(String secCode){
    
        String req = "SELECT `secteur`.`SEC_CODE`, "
                    + "	DATE_FORMAT(RAP_DATE, '%Y-%m') AS RAP_MONTH, "
                    + "    count(RAP_DATE) AS NB_RAP "
                    + "FROM ( "
                    + "    SELECT tr.* "
                    + "    FROM `travailler` tr "
                    + "    JOIN ( "
                    + "        SELECT VIS_MATRICULE, MAX(jjmmaa) AS maxDate "
                    + "        FROM `travailler` "
                    + "        GROUP BY VIS_MATRICULE "
                    + "    ) groupetr "
                    + "    ON tr.VIS_MATRICULE = groupetr.VIS_MATRICULE "
                    + "    AND tr.jjmmaa = groupetr.maxDate "
                    + ") AS trava, `region`, `secteur`, `visiteur`, `rapport_visite` "
                    + "WHERE `region`.REG_CODE = trava.REG_CODE "
                    + "AND `region`.SEC_CODE = `secteur`.SEC_CODE "
                    + "AND trava.VIS_MATRICULE = `visiteur`.VIS_MATRICULE "
                    + "AND `visiteur`.VIS_MATRICULE = `rapport_visite`.VIS_MATRICULE "
                    + "AND `secteur`.`SEC_CODE` = '"+ secCode +"' "
                    + "group by RAP_MONTH, `secteur`.SEC_CODE; ";
        
        Object[] tableMonthSecteurNbRapports = ConnectionManager.requestRead(req);

        String req2 = "SELECT `secteur`.`SEC_CODE`, "
                + "	DATE_FORMAT(AC_DATE, '%Y-%m') AS AC_MONTH, "
                + "    count(AC_DATE) AS NB_AC "
                + "FROM ( "
                + "    SELECT tr.* "
                + "    FROM `travailler` tr "
                + "    JOIN ( "
                + "        SELECT VIS_MATRICULE, MAX(jjmmaa) AS maxDate "
                + "        FROM `travailler` "
                + "        GROUP BY VIS_MATRICULE "
                + "    ) groupetr "
                + "    ON tr.VIS_MATRICULE = groupetr.VIS_MATRICULE "
                + "    AND tr.jjmmaa = groupetr.maxDate "
                + ") AS trava, `region`, `secteur`, `visiteur`, `realiser` , `activite_compl` "
                + "WHERE `region`.REG_CODE = trava.REG_CODE "
                + "AND `region`.SEC_CODE = `secteur`.SEC_CODE "
                + "AND trava.VIS_MATRICULE = `visiteur`.VIS_MATRICULE "
                + "AND `visiteur`.VIS_MATRICULE = `realiser`.VIS_MATRICULE "
                + "AND `realiser`.AC_NUM = `activite_compl`.AC_NUM "
                + "AND `secteur`.`SEC_CODE` = 'E' "
                + "group by AC_MONTH, `secteur`.`SEC_CODE`; ";

        
        Object[] tableMonthSecteurNbActivites = ConnectionManager.requestRead(req2);
        
        this.display(tableMonthSecteurNbRapports, tableMonthSecteurNbActivites);
    }
    
    private void display(Object[] tableNbRapports, Object[] tableNbActivites){
        SimpleAttributeSet style_normal = new SimpleAttributeSet();
        
        try {
            StyledDocument doc = jTextPane1.getStyledDocument();
            doc.remove(0, doc.getLength());
            
            java.util.Date currentDate = new java.util.Date();
            DateFormat df = new SimpleDateFormat("yyyy");
            int currentYear = Integer.valueOf(df.format(currentDate));
            DateFormat df2 = new SimpleDateFormat("MM");
            int currentMonth = Integer.valueOf(df2.format(currentDate));
            
            String strCurrentMonth;
            String strCurrentYear;
            String strDate;
            for (int i = 0; i < 36; i++) {
//                currentMonth--;
                if(currentMonth == 0){
                    currentMonth = 12;
                    currentYear--;
                }
                strCurrentMonth = String.valueOf(currentMonth);
                strCurrentYear = String.valueOf(currentYear);
                if(strCurrentMonth.length() == 1){
                    strCurrentMonth = "0"+strCurrentMonth; 
                }
                strDate = strCurrentYear +"-"+ strCurrentMonth;
                
                int nbRap = 0;
                for (int j = 0; j < tableNbRapports.length; j++) {
                    TreeMap< String, Object> treeVisiteur = (TreeMap< String, Object>) tableNbRapports[j];
                    String rapMonth = (String) treeVisiteur.get("RAP_MONTH");
                    if(rapMonth.equals(strDate)){
                        nbRap = (int) treeVisiteur.get("NB_RAP");
                    }
                }
                
                int nbAct = 0;
                int k = 0;
                while( k < tableNbActivites.length ) {
                    k++;
                    System.out.println(tableNbActivites.length);
                    TreeMap< String, Object> treeActivite = (TreeMap< String, Object>) tableNbActivites[k];
                    String acMonth = (String) treeActivite.get("AC_MONTH");
                    if(acMonth.equals(strDate)){
                        nbAct = (int) treeActivite.get("NB_AC");
                    }
                }
                
                doc.insertString(doc.getLength(), strDate+" | "+nbRap+" | "+nbAct+"\n\n", style_normal);
                
                currentMonth--;
            }
            
        }
        catch (BadLocationException e) {
            e.printStackTrace();
        }
    }
    
}
